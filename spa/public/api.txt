上传的网站支持spa+nodejs后台，后台的入口文件为app.js。比如上传的网站压缩包为a.7z，其中结构应如下所示
├── a.7z              --上传此文件包含如下结构
├── app.js            --后台服务入口
├── index.html
├── node_modules/
├── package.json      --no need
├── package-lock.json --no need
└── public
    └── index.html

默认的app.js启动了http server 监听3000端口，返回nodejs版本
根目录下的index.html为spa入口文件，默认访问地址为[安卓手机ip:57001]。当然也可以用express返回public目录下的静态文件，像这样

const path = require('path');
const express = require('express')
const app = express()
app.use(express.static(path.join(__dirname, 'public')))
app.get('/', (req, res) => {
  res.end('nodejs versions: ' + JSON.stringify(process.versions));
})
app.listen(3000)
***上传网站需提供管理员密码，也就是下述的admin密码，默认为root***
每次上传网站时会解压覆盖原有文件，并自动重启nodejs进程。node_modules中安装的应为纯js第三方包，
不能用包含native code的npm包, 因为那些模块需重新交叉编译为安卓版的才能用。
除了sqlite3 npm module，因为一般网站都需要数据库，所以我特殊处理了这个模块。请参见《nodejs demo代码》的使用说明

另外该应用的c++ server 也提供了简单的sqlite数据库远程访问接口。说明如下
***也就是说如果nodejs也通过npm sqlite3模块使用数据库，和下面的数据库是分开的***
***下述的是c++ web server直接调用c接口，并提供http post协议访问; nodejs的是交叉编译的安卓版npm模块，直接通过js调用***
***js调用接口请参见：https://www.npmjs.com/package/sqlite3***
1. 数据库RESTful接口
后台提供了sqlite数据库存取接口，分两级密码：
"管理员"可执行任何合法的sql语句，包括：建/删表、增、删、改 记录，
"客户端"只能执行select查询语句（除了user表）
"客户端"通过登录成功后可获取“管理员”密码

这些密码存储在user表里，表结构如下：
-----------------------
|admin|client|usr|pass|     ----字段名
-----------------------
|root|guest|mystore|letmein|----初始默认值

提交执行每个sql语句前需要验证密码，初次使用时，请先修改访问密码，以后用新密码读写数据库即可。
请求/返回的数据都是json格式，用post方式调用
①：执行sql语句接口
请求格式： pass为数据库访问密码，sql为sqlite支持的所有sql语句
URL： http://手机ip:端口（默认57001）/sql。如果在站点页面中访问，请用相对地址：/sql
{ 
  "pass": "root",
  "sql": "update user set admin='my-password';"
}
返回格式： ret为0代表执行成功，-1代表失败，同时带回msg字段标示失败原因, 
如果sql为select语句，result表示返回的查询结果
{
  ret: 0,
  msg: "错误描述，失败时返回",
  result: [{"字段1":value1, "字段2":value2, ...}, ...]
}
②：登录接口
URL： http://手机ip:端口（默认57001）/login。相对地址：/login
{ 
  "usr": "mystore",
  "pass": "letmein"
}
返回格式： ret为0代表登录成功，-1代表失败，同时带回msg字段标示失败原因, 
如果成功，返回的admin字段带回管理员密码，其后用这个密码可进行任何数据库操作
{
  ret: 0,
  msg: "错误描述，失败时返回",
  admin: "管理员密码"
}

提示：
这个接口已开启了cors，可在其它站点的js中调用，不存在跨域问题。所以也可把手机当做数据库服务器使用。
如果误操作把user表删除了，或修改后忘记密码，那就只能重装软件才能使用数据库了。

2. WebSocket广播接口
同时提供一个websocket接口，可用来做内网实时在线游戏，
比如给每个浏览器生成一个uuid存在localStorage里，每次广播时带上自己的id标识。玩家的数据可用上面的接口存数据库
websocket地址为：ws://手机ip:端口（默认57001）/broadcast
注意：“个人网站”地址的端口总是在“服务地址”的端口号上+1，而服务地址是可修改的，下次启动时“个人网站”端口将随之更改。

// 在个人网站中建立websocket的示例代码：
const url = `ws://${location.host}/broadcast`;
const ws = new WebSocket(url);
ws.onmessage = (evt)=>{
  // 接收其它浏览器发送的广播数据
  const msg = evt.data;
}
ws.onclose = ()=>{

};
ws.onerror = ()=>{
    
};
ws.onopen = ()=>{
  console.log(`ws.onopen`)
  const msg = "hello everyone";
  // 这个消息会广播至所有websocket客户端
  ws.send(msg);
};

【提示】：
如果网站页面中RESTful和websocket的请求都用相对地址（/sql & ws://${location.host}/broadcast），
那么这个网站可以被公网上的其它用户穿透访问，并能正常执行数据库请求和websocket广播。


